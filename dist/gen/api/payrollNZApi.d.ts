/**
 * Xero Payroll NZ
 * This is the Xero Payroll API for orgs in New Zealand region.
 *
 * The version of the OpenAPI document: 2.1.3
 * Contact: api@xero.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import http = require('http');
import { Employee } from '../model/payroll-nz/employee';
import { Timesheet } from '../model/payroll-nz/timesheet';
import { TimesheetLine } from '../model/payroll-nz/timesheetLine';
import { Authentication } from '../model/payroll-nz/models';
import { OAuth } from '../model/payroll-nz/models';
export declare enum PayrollNZApiApiKeys {
}
export declare class PayrollNZApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected binaryHeaders: any;
    protected authentications: {
        default: Authentication;
        OAuth2: OAuth;
    };
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: PayrollNZApiApiKeys, value: string): void;
    set accessToken(token: string);
    /**
     *
     * @summary Use this method to create a payroll employee
     * @param xeroTenantId Xero identifier for Tenant
     * @param employee
     */
    createEmployee(xeroTenantId: string, employee: Employee, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: any;
    }>;
    /**
     *
     * @summary Use this method to create a timesheet
     * @param xeroTenantId Xero identifier for Tenant
     * @param timesheet
     */
    createTimesheet(xeroTenantId: string, timesheet: Timesheet, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: any;
    }>;
    /**
     * Adds an TimesheetsLine to the system
     * @summary adds a fixed TimesheetsLine
     * @param xeroTenantId Xero identifier for Tenant
     * @param timesheetID Unique identifier for retrieving single object
     * @param timesheetLines Fixed TimesheetsLine you are creating
     */
    createTimesheetLine(xeroTenantId: string, timesheetID: string, timesheetLine: TimesheetLine, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: any;
    }>;
    /**
     *
     * @summary searches employees
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param page e.g. page&#x3D;1 – Up to 100 employees will be returned in a single API call
     */
    getEmployees(xeroTenantId: string, page?: number, pageSize?: number, filterBy?: 'FirstName' | 'LastName', options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: any;
    }>;
    /**
     *
     * @summary searches Pay Items
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call
     */
    getEarningsRates(xeroTenantId: string, page?: number, pageSize?: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: any;
    }>;
    /**
     *
     * @summary retrieve settings
     * @param xeroTenantId Xero identifier for Tenant
     */
    getSettings(xeroTenantId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: any;
    }>;
    /**
     *
     * @summary searches for an timesheet by unique id
     * @param xeroTenantId Xero identifier for Tenant
     * @param timesheetID Timesheet id for single object
     */
    getTimesheet(xeroTenantId: string, timesheetID: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: any;
    }>;
    /**
     *
     * @summary searches timesheets
     * @param xeroTenantId Xero identifier for Tenant
     * @param ifModifiedSince Only records created or modified since this timestamp will be returned
     * @param where Filter by an any element
     * @param order Order by an any element
     * @param page e.g. page&#x3D;1 – Up to 100 timesheets will be returned in a single API call
     */
    getTimesheets(xeroTenantId: string, page?: number, pageSize?: number, filterBy?: 'EmployeeID' | 'PayrollCalendarID', options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: any;
    }>;
    /**
     * Update properties on a single employee
     * @summary Update an Employee
     * @param xeroTenantId Xero identifier for Tenant
     * @param employeeId Employee id for single object
     * @param employee
     */
    /**
     * Update properties on a single timesheet
     * @summary Update a Timesheet
     * @param xeroTenantId Xero identifier for Tenant
     * @param timesheetID Timesheet id for single object
     * @param timesheet
     */
    updateTimesheet(xeroTenantId: string, timesheetID: string, timesheet?: Array<Timesheet>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: any;
    }>;
    /**
 * Adds an TimesheetsLine to the system
 * @summary adds a fixed TimesheetsLine
 * @param xeroTenantId Xero identifier for Tenant
 * @param timesheetID Unique identifier for retrieving single object
 * @param timesheetLineID Unique identifier for retrieving single object
 * @param timesheetLines Fixed TimesheetsLine you are creating
 */
    updateTimesheetLine(xeroTenantId: string, timesheetID: string, timesheetLineID: string, timesheetLine: TimesheetLine, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: any;
    }>;
    /**
     *
     * @summary Allows you to delete a of Timesheets
     * @param xeroTenantId Xero identifier for Tenant
     * @param timesheetID Unique identifier for retrieving single object
     */
    deleteTimesheets(xeroTenantId: string, timesheetID: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: any;
    }>;
    /**
     * @summary Allows you to delete a of Timesheets
     * @param xeroTenantId Xero identifier for Tenant
     * @param timesheetID Unique identifier for retrieving single object
     * @param timesheetLineID Unique identifier for retrieving single object
     */
    deleteTimesheetsLine(xeroTenantId: string, timesheetID: string, timesheetLineID: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: any;
    }>;
}
